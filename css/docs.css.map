{"version":3,"sourceRoot":"","sources":["../node_modules/bootstrap/scss/_grid.scss","../node_modules/bootstrap/scss/mixins/_grid.scss","../node_modules/bootstrap/scss/mixins/_breakpoints.scss","../scss/docs/_colors.scss","../scss/_variables.scss"],"names":[],"mappings":"AAIA;EAEI;EAAA;EAAA;EAAA;EAAA;EAAA;;;AAeF;EACE;EACA;EACA;EACA;;AC8GM;EACE;;AADF;EACE;;AADF;EACE;;AADF;EACE;;AADF;EACE;;AADF;EACE;;AADF;EACE;;AADF;EACE;;AADF;EACE;;AADF;EACE;;AADF;EACE;;AADF;EACE;;AAOF;EACE,mBAFS;;AACX;EACE,mBAFS;;AACX;EACE,mBAFS;;AACX;EACE,mBAFS;;AACX;EACE,mBAFS;;AACX;EACE,mBAFS;;AACX;EACE,mBAFS;;AACX;EACE,mBAFS;;AACX;EACE,mBAFS;;AACX;EACE,mBAFS;;AACX;EACE,mBAFS;;AC/EjB;EDwEM;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EAOF;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;;AC/EjB;EDwEM;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EAOF;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;;AC/EjB;EDwEM;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EAOF;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;;AC/EjB;EDwEM;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EAOF;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;;AC/EjB;EDwEM;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EADF;IACE;;EAOF;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;EACX;IACE,mBAFS;;;;AEzIjB;EACE;EACA;;AAEA;EAIE;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SACE;EAGF;EACA,kBACE;EAUF;EACA;;;AAhCJ;EACE;EACA;;AAEA;EAIE;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SACE;EAGF;EACA,kBACE;EAUF;EACA;;;AAhCJ;EACE;EACA;;AAEA;EAIE;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SACE;EAGF;EACA,kBACE;EAUF;EACA;;;AAhCJ;EACE;EACA;;AAEA;EAIE;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SACE;EAGF;EACA,kBACE;EAUF;EACA;;;AAhCJ;EACE;EACA;;AAEA;EAIE;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SACE;EAGF;EACA,kBACE;EAUF;EACA;;;AAhCJ;EACE;EACA;;AAEA;EAIE;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SACE;EAGF;EACA,kBACE;EAUF;EACA;;;AAhCJ;EACE;EACA;;AAEA;EAIE;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SACE;EAGF;EACA,kBACE;EAUF;EACA;;;AAhCJ;EACE;EACA;;AAEA;EAIE;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SACE;EAGF;EACA,kBACE;EAUF;EACA;;;AAhCJ;EACE;EACA;;AAEA;EAIE;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SACE;EAGF;EACA,kBACE;EAUF;EACA;;;AAhCJ;EACE;EACA;;AAEA;EAIE;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SACE;EAGF;EACA,kBACE;EAUF;EACA;;;AAhCJ;EACE;EACA;;AAEA;EAIE;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SACE;EAGF;EACA,kBACE;EAUF;EACA;;;AAhCJ;EACE;EACA;;AAEA;EAIE;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SACE;EAGF;EACA,kBACE;EAUF;EACA;;;AAhCJ;EACE;EACA;;AAEA;EAIE;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SACE;EAGF;EACA,kBACE;EAUF;EACA;;;AAhCJ;EACE;EACA;;AAEA;EAIE;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SACE;EAGF;EACA,kBACE;EAUF;EACA;;;AAhCJ;EACE;EACA;;AAEA;EAIE;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SACE;EAGF;EACA,kBACE;EAUF;EACA;;;AAKR;EAAe;EAAkC,kBCDtC;;;ADEX;EAAe;EAAkC,kBCDtC;;;ADEX;EAAe;EAAkC,kBCDtC;;;ADEX;EAAe;EAAkC,kBCDtC;;;ADEX;EAAe;EAAkC,kBC9CtC;;;AD+CX;EAAe;EAAkC,kBCDtC;;;ADEX;EAAe;EAAkC,kBCDtC;;;ADEX;EAAe;EAAkC,kBCDtC;;;ADEX;EAAe;EAAkC,kBCDtC","file":"docs.css","sourcesContent":["// Row\n//\n// Rows contain your columns.\n\n:root {\n  @each $name, $value in $grid-breakpoints {\n    --#{$prefix}breakpoint-#{$name}: #{$value};\n  }\n}\n\n@if $enable-grid-classes {\n  .row {\n    @include make-row();\n\n    > * {\n      @include make-col-ready();\n    }\n  }\n}\n\n@if $enable-cssgrid {\n  .grid {\n    display: grid;\n    grid-template-rows: repeat(var(--#{$prefix}rows, 1), 1fr);\n    grid-template-columns: repeat(var(--#{$prefix}columns, #{$grid-columns}), 1fr);\n    gap: var(--#{$prefix}gap, #{$grid-gutter-width});\n\n    @include make-cssgrid();\n  }\n}\n\n\n// Columns\n//\n// Common styles for small and large grid columns\n\n@if $enable-grid-classes {\n  @include make-grid-columns();\n}\n","// Grid system\n//\n// Generate semantic grid columns with these mixins.\n\n@mixin make-row($gutter: $grid-gutter-width) {\n  --#{$prefix}gutter-x: #{$gutter};\n  --#{$prefix}gutter-y: 0;\n  display: flex;\n  flex-wrap: wrap;\n  // TODO: Revisit calc order after https://github.com/react-bootstrap/react-bootstrap/issues/6039 is fixed\n  margin-top: calc(-1 * var(--#{$prefix}gutter-y)); // stylelint-disable-line function-disallowed-list\n  margin-right: calc(-.5 * var(--#{$prefix}gutter-x)); // stylelint-disable-line function-disallowed-list\n  margin-left: calc(-.5 * var(--#{$prefix}gutter-x)); // stylelint-disable-line function-disallowed-list\n}\n\n@mixin make-col-ready() {\n  // Add box sizing if only the grid is loaded\n  box-sizing: if(variable-exists(include-column-box-sizing) and $include-column-box-sizing, border-box, null);\n  // Prevent columns from becoming too narrow when at smaller grid tiers by\n  // always setting `width: 100%;`. This works because we set the width\n  // later on to override this initial width.\n  flex-shrink: 0;\n  width: 100%;\n  max-width: 100%; // Prevent `.col-auto`, `.col` (& responsive variants) from breaking out the grid\n  padding-right: calc(var(--#{$prefix}gutter-x) * .5); // stylelint-disable-line function-disallowed-list\n  padding-left: calc(var(--#{$prefix}gutter-x) * .5); // stylelint-disable-line function-disallowed-list\n  margin-top: var(--#{$prefix}gutter-y);\n}\n\n@mixin make-col($size: false, $columns: $grid-columns) {\n  @if $size {\n    flex: 0 0 auto;\n    width: percentage(divide($size, $columns));\n\n  } @else {\n    flex: 1 1 0;\n    max-width: 100%;\n  }\n}\n\n@mixin make-col-auto() {\n  flex: 0 0 auto;\n  width: auto;\n}\n\n@mixin make-col-offset($size, $columns: $grid-columns) {\n  $num: divide($size, $columns);\n  margin-left: if($num == 0, 0, percentage($num));\n}\n\n// Row columns\n//\n// Specify on a parent element(e.g., .row) to force immediate children into NN\n// number of columns. Supports wrapping to new lines, but does not do a Masonry\n// style grid.\n@mixin row-cols($count) {\n  > * {\n    flex: 0 0 auto;\n    width: percentage(divide(1, $count));\n  }\n}\n\n// Framework grid generation\n//\n// Used only by Bootstrap to generate the correct number of grid classes given\n// any value of `$grid-columns`.\n\n@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {\n  @each $breakpoint in map-keys($breakpoints) {\n    $infix: breakpoint-infix($breakpoint, $breakpoints);\n\n    @include media-breakpoint-up($breakpoint, $breakpoints) {\n      // Provide basic `.col-{bp}` classes for equal-width flexbox columns\n      .col#{$infix} {\n        flex: 1 0 0%; // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4\n      }\n\n      .row-cols#{$infix}-auto > * {\n        @include make-col-auto();\n      }\n\n      @if $grid-row-columns > 0 {\n        @for $i from 1 through $grid-row-columns {\n          .row-cols#{$infix}-#{$i} {\n            @include row-cols($i);\n          }\n        }\n      }\n\n      .col#{$infix}-auto {\n        @include make-col-auto();\n      }\n\n      @if $columns > 0 {\n        @for $i from 1 through $columns {\n          .col#{$infix}-#{$i} {\n            @include make-col($i, $columns);\n          }\n        }\n\n        // `$columns - 1` because offsetting by the width of an entire row isn't possible\n        @for $i from 0 through ($columns - 1) {\n          @if not ($infix == \"\" and $i == 0) { // Avoid emitting useless .offset-0\n            .offset#{$infix}-#{$i} {\n              @include make-col-offset($i, $columns);\n            }\n          }\n        }\n      }\n\n      // Gutters\n      //\n      // Make use of `.g-*`, `.gx-*` or `.gy-*` utilities to change spacing between the columns.\n      @each $key, $value in $gutters {\n        .g#{$infix}-#{$key},\n        .gx#{$infix}-#{$key} {\n          --#{$prefix}gutter-x: #{$value};\n        }\n\n        .g#{$infix}-#{$key},\n        .gy#{$infix}-#{$key} {\n          --#{$prefix}gutter-y: #{$value};\n        }\n      }\n    }\n  }\n}\n\n@mixin make-cssgrid($columns: $grid-columns, $breakpoints: $grid-breakpoints) {\n  @each $breakpoint in map-keys($breakpoints) {\n    $infix: breakpoint-infix($breakpoint, $breakpoints);\n\n    @include media-breakpoint-up($breakpoint, $breakpoints) {\n      @if $columns > 0 {\n        @for $i from 1 through $columns {\n          .g-col#{$infix}-#{$i} {\n            grid-column: auto / span $i;\n          }\n        }\n\n        // Start with `1` because `0` is an invalid value.\n        // Ends with `$columns - 1` because offsetting by the width of an entire row isn't possible.\n        @for $i from 1 through ($columns - 1) {\n          .g-start#{$infix}-#{$i} {\n            grid-column-start: $i;\n          }\n        }\n      }\n    }\n  }\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl xxl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n","//\n// Docs color palette classes\n//\n\n@each $color, $value in $colors {\n    .swatch-#{$color} {\n      color: color-contrast($value);\n      background-color: #{$value};\n  \n      &::after {\n        $contrast-ratio: \"#{contrast-ratio($value, color-contrast($value))}\";\n        $against-white: \"#{contrast-ratio($value, $white)}\";\n        $against-black: \"#{contrast-ratio($value, $black)}\";\n        position: absolute;\n        top: 1rem;\n        right: 1rem;\n        padding-left: 1rem;\n        font-size: .75rem;\n        line-height: 1.35;\n        white-space: pre;\n        content:\n          str-slice($contrast-ratio, 1, 4) \"\\A\"\n          str-slice($against-white, 1, 4) \"\\A\"\n          str-slice($against-black, 1, 4);\n        background-color: $value;\n        background-image:\n          linear-gradient(\n            to bottom,\n            transparent .25rem,\n            color-contrast($value) .25rem .75rem,\n            transparent .75rem 1.25rem,\n            $white 1.25rem 1.75rem,\n            transparent 1.75rem 2.25rem,\n            $black 2.25rem 2.75rem,\n            transparent 2.75rem\n          );\n        background-repeat: no-repeat;\n        background-size: .5rem 100%;\n      }\n    }\n}\n\n.bd-rose-100 { color: color-contrast($rose-100); background-color: $rose-100; }\n.bd-rose-200 { color: color-contrast($rose-200); background-color: $rose-200; }\n.bd-rose-300 { color: color-contrast($rose-300); background-color: $rose-300; }\n.bd-rose-400 { color: color-contrast($rose-400); background-color: $rose-400; }\n.bd-rose-500 { color: color-contrast($rose-500); background-color: $rose-500; }\n.bd-rose-600 { color: color-contrast($rose-600); background-color: $rose-600; }\n.bd-rose-700 { color: color-contrast($rose-700); background-color: $rose-700; }\n.bd-rose-800 { color: color-contrast($rose-800); background-color: $rose-800; }\n.bd-rose-900 { color: color-contrast($rose-900); background-color: $rose-900; }\n","$tapestry: #b25a7c !default;\n$eletric-violet: #820ad1 !default;\n$white:    #fff !default;\n$gray-100: #f8f9fa !default;\n$gray-200: #e9ecef !default;\n$gray-300: #dee2e6 !default;\n$gray-400: #ced4da !default;\n$gray-500: #adb5bd !default;\n$gray-600: #6c757d !default;\n$gray-700: #495057 !default;\n$gray-800: #343a40 !default;\n$gray-900: #212529 !default;\n$black:    #000 !default;\n$blue:    #0d6efd !default;\n$indigo:  #6610f2 !default;\n$purple:  $eletric-violet !default;\n$rose:    $tapestry !default;\n$pink:    #d63384 !default;\n$red:     #dc3545 !default;\n$orange:  #fd7e14 !default;\n$yellow:  #ffc107 !default;\n$green:   #198754 !default;\n$teal:    #20c997 !default;\n$cyan:    #0dcaf0 !default;\n$colors: (\n  \"blue\":       $blue,\n  \"indigo\":     $indigo,\n  \"purple\":     $purple,\n  \"rose\":       $rose,\n  \"pink\":       $pink,\n  \"red\":        $red,\n  \"orange\":     $orange,\n  \"yellow\":     $yellow,\n  \"green\":      $green,\n  \"teal\":       $teal,\n  \"cyan\":       $cyan,\n  \"black\":      $black,\n  \"white\":      $white,\n  \"gray\":       $gray-600,\n  \"gray-dark\":  $gray-800\n) !default;\n$rose-100: tint-color($rose, 80%) !default;\n$rose-200: tint-color($rose, 60%) !default;\n$rose-300: tint-color($rose, 40%) !default;\n$rose-400: tint-color($rose, 20%) !default;\n$rose-500: $rose !default;\n$rose-600: shade-color($rose, 20%) !default;\n$rose-700: shade-color($rose, 40%) !default;\n$rose-800: shade-color($rose, 60%) !default;\n$rose-900: shade-color($rose, 80%) !default;\n$primary: $tapestry !default;\n$variable-prefix: bs- !default; // Deprecated in v5.2.0 for the shorter `$prefix`\n$prefix: $variable-prefix !default;\n$input-btn-padding-y: .375rem !default;\n$input-btn-padding-x: .75rem !default;\n$font-family-sans-serif: Graphik, system-ui, -apple-system, \"Segoe UI\", Roboto, \"Helvetica Neue\", \"Noto Sans\", \"Liberation Sans\", Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\" !default;\n$grid-gutter-width: 3rem !default;\n$font-size-base: 1rem !default;\n$font-size-sm: $font-size-base * .875 !default;\n$line-height-sm: 1.28571429 !default;\n$btn-padding-y: .9375rem !default;\n$btn-padding-x: 1.875rem !default;\n$btn-font-size: $font-size-sm !default;\n$btn-line-height: $line-height-sm !default;\n$input-btn-border-width: var(--#{$prefix}border-width) !default;\n$btn-border-width: $input-btn-border-width !default;\n$btn-height-border: calc(#{$btn-border-width} * 2) !default;\n$btn-height: add($btn-line-height * 1em, add($btn-padding-y * 2, $btn-height-border, false)) !default;\n$btn-border-radius: calc(#{$btn-height} * 2) !default;\n\n@import \"../node_modules/bootstrap/scss/variables\";"]}